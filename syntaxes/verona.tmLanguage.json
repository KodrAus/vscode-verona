{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Verona",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#class"
    }
  ],
  "repository": {
    "cown": {
      "match": "\\b(cown)\\b",
      "captures": {
        "0": {
          "name": "keyword.other.cown.verona"
        }
      }
    },
    "builtin": {
      "match": "\\b(builtin)\\b",
      "captures": {
        "0": {
          "name": "keyword.other.builtin.verona"
        }
      }
    },
    "pointer": {
      "match": "&",
      "captures": {
        "1": {
          "name": "punctuation.ampersand.verona"
        }
      }
    },
    "mutability": {
      "match": "\\b(imm|mut|iso)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.mutability.verona"
        }
      }
    },
    "class": {
      "begin": "(?=\\bclass|primitive)",
      "end": "(?<=\\})",
      "name": "meta.class.verona",
      "patterns": [
        {
          "begin": "(?=\\bclass|primitive\\b\\s+[_[:alpha:]][_[:alnum:]]*(\\[.*\\])?\\s*)",
          "end": "(?=\\{)",
          "name": "meta.class.header.verona",
          "patterns": [
            {
              "match": "class",
              "name": "keyword.other.class.verona"
            },
            {
              "match": "primitive",
              "name": "keyword.other.primitive.verona"
            },
            {
              "include": "#cown"
            },
            {
              "include": "#generics"
            },
            {
              "match": "[_[:alpha:]][_[:alnum:]]*",
              "name": "entity.name.type.verona"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curlybrace.open.verona"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curlybrace.close.verona"
            }
          },
          "name": "meta.class.block.verona",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#block"
            },
            {
              "include": "#builtin"
            },
            {
              "include": "#function"
            },
            {
              "include": "#field"
            }
          ]
        }
      ]
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curlybrace.open.verona"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.curlybrace.close.verona"
        }
      },
      "name": "meta.block.verona",
      "patterns": [
        {
          "include": "#block"
        }
      ]
    },
    "function": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*[\\(\\[])",
      "end": "(?<=;)|(?=\\{)",
      "name": "meta.function.verona",
      "patterns": [
        {
          "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*)",
          "end": "(?=\\()",
          "patterns": [
            {
              "include": "#generics"
            },
            {
              "match": "[_[:alpha:]][_[:alnum:]]*",
              "name": "entity.name.function.verona"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.paren.open.verona"
            }
          },
          "end": "(\\))(?=\\s*[:;\\{])",
          "endCaptures": {
            "1": {
              "name": "punctuation.paren.close.verona"
            }
          },
          "name": "meta.function.arguments.verona",
          "patterns": [
            {
              "include": "#arg"
            }
          ]
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.colon.verona"
            }
          },
          "end": "(?=;)|(?=\\{)",
          "name": "meta.function.return.verona",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "match": ";",
          "name": "punctuation.semicolon.verona"
        }
      ]
    },
    "field": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*:)",
      "end": "(?<=;)",
      "name": "meta.field.verona",
      "patterns": [
        {
          "begin": "[_[:alpha:]][_[:alnum:]]*",
          "end": "(?=:)",
          "name": "entity.name.variable.field.verona"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.colon.verona"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.semicolon.verona"
            }
          },
          "name": "meta.field.type.verona",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "arg": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*:)",
      "end": "(?=[,\\)])",
      "name": "meta.argument.verona",
      "patterns": [
        {
          "match": "\\bself\\b",
          "name": "keyword.other.self.verona"
        },
        {
          "begin": "[_[:alpha:]][_[:alnum:]]*",
          "end": "(?=:)",
          "name": "entity.name.variable.argument.verona"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.colon.verona"
            }
          },
          "end": "(?=[,\\)])",
          "endCaptures": {
            "0": {
              "name": "punctuation.semicolon.verona"
            }
          },
          "name": "meta.argument.type.verona",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "generics": {
      "begin": "(?=\\[)",
      "end": "(?<=\\])",
      "name": "meta.generics.verona",
      "patterns": [
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.bracket.open.verona"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.bracket.close.verona"
            }
          },
          "patterns": [
            {
              "begin": "(?=\\b((class)\\s+)?[_[:alpha:]][_[:alnum:]]*\\b)",
              "end": "(?=[,\\]])",
              "name": "meta.generics.type.verona",
              "patterns": [
                {
                  "include": "#generics"
                },
                {
                  "match": "class",
                  "name": "keyword.other.generics.constraint.class.verona"
                },
                {
                  "match": "[_[:alpha:]][_[:alnum:]]*",
                  "name": "entity.name.type.generic.verona"
                }
              ]
            },
            {
              "match": ",",
              "name": "punctuation.comma.verona"
            }
          ]
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#cown"
        },
        {
          "include": "#mutability"
        },
        {
          "include": "#pointer"
        },
        {
          "include": "#generics"
        },
        {
          "match": "\\(",
          "name": "punctuation.paren.open.verona"
        },
        {
          "match": "\\)",
          "name": "punctuation.paren.close.verona"
        },
        {
          "match": "\\|",
          "name": "punctuation.verticalbar.verona"
        },
        {
          "match": "[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.verona"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.verona",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.inline.verona",
          "begin": "//",
          "end": "$"
        }
      ]
    }
  },
  "scopeName": "source.verona"
}
