{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Verona",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#use"
    },
    {
      "include": "#class"
    },
    {
      "include": "#typedef"
    },
    {
      "include": "#function"
    }
  ],
  "repository": {
    "cown": {
      "match": "\\b(cown)\\b",
      "captures": {
        "0": {
          "name": "keyword.other.cown.verona"
        }
      }
    },
    "builtin": {
      "match": "\\b(builtin)\\b",
      "captures": {
        "0": {
          "name": "keyword.other.builtin.verona"
        }
      }
    },
    "mutability": {
      "match": "\\b(imm|mut|iso)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.mutability.verona"
        }
      }
    },
    "use": {
      "begin": "(?=\\b(use)\\b)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.use.verona"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#string"
        }
      ]
    },
    "class": {
      "begin": "(?=\\b(?:class|primitive|interface)\\b)",
      "end": "(?<=\\})",
      "patterns": [
        {
          "begin": "(?=class|primitive|interface)",
          "end": "(?=\\{)",
          "patterns": [
            {
              "match": "class",
              "name": "keyword.other.class.verona"
            },
            {
              "match": "primitive",
              "name": "keyword.other.primitive.verona"
            },
            {
              "match": "interface",
              "name": "keyword.other.interface.verona"
            },
            {
              "include": "#cown"
            },
            {
              "include": "#generics"
            },
            {
              "match": "[_[:alpha:]][_[:alnum:]]*",
              "name": "entity.name.type.verona"
            }
          ]
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#class"
            },
            {
              "include": "#block"
            },
            {
              "include": "#builtin"
            },
            {
              "include": "#typedef"
            },
            {
              "include": "#function"
            },
            {
              "include": "#field"
            }
          ]
        }
      ]
    },
    "typedef": {
      "begin": "\\b(type)\\b\\s+",
      "beginCaptures": {
        "0": {
          "name": "keyword.other.type.verona"
        }
      },
      "end": "(?<=;)",
      "patterns": [
        {
          "begin": "(?=[_[:alnum:]])",
          "end": "(?=\\=)",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "begin": "\\=",
          "end": ";",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "function": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*[\\(\\[])",
      "end": "(?<=;)|(?=\\{)",
      "patterns": [
        {
          "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b)",
          "end": "(?=\\()",
          "patterns": [
            {
              "include": "#generics"
            },
            {
              "match": "[_[:alpha:]][_[:alnum:]]*",
              "name": "entity.name.function.verona"
            }
          ]
        },
        {
          "begin": "\\(",
          "end": ";|(?=\\{)",
          "patterns": [
            {
              "include": "#where"
            },
            {
              "include": "#arg"
            },
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "where": {
      "begin": "(?=\\bwhere\\b)",
      "end": "(?=[;\\{])",
      "patterns": [
        {
          "match": "where",
          "name": "keyword.control.where.verona"
        },
        {
          "match": "in",
          "name": "keyword.control.where.in.verona"
        },
        {
          "match": "from",
          "name": "keyword.control.where.from.verona"
        },
        {
          "match": "return",
          "name": "keyword.other.return.verona"
        },
        {
          "include": "#self"
        },
        {
          "begin": ":",
          "end": "(?=[;,\\{]|where)",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "match": "[_[:alpha:]][_[:alnum:]]*(?=:)",
          "name": "entity.name.type.verona"
        },
        {
          "match": "[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.variable.verona"
        }
      ]
    },
    "arg": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*:)",
      "end": "(?=[,\\)])",
      "patterns": [
        {
          "include": "#self"
        },
        {
          "begin": "[_[:alpha:]][_[:alnum:]]*",
          "end": "(?=:)",
          "name": "entity.name.variable.argument.verona"
        },
        {
          "begin": ":",
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "field": {
      "begin": "(?=\\b[_[:alpha:]][_[:alnum:]]*\\b\\s*:)",
      "end": "(?<=;)",
      "patterns": [
        {
          "begin": "[_[:alpha:]][_[:alnum:]]*",
          "end": "(?=:)",
          "name": "entity.name.variable.field.verona"
        },
        {
          "begin": ":",
          "end": ";",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "block": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#expr"
        }
      ]
    },
    "expr": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#number"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#block"
        },
        {
          "include": "#self"
        },
        {
          "include": "#mutview"
        },
        {
          "include": "#new"
        },
        {
          "include": "#control-flow"
        },
        {
          "include": "#assignment"
        },
        {
          "include": "#call"
        },
        {
          "include": "#accessor"
        },
        {
          "include": "#generics"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "control-flow": {
      "patterns": [
        {
          "match": "\\bwhen\\b",
          "name": "keyword.control.when.verona"
        },
        {
          "match": "\\bmatch\\b",
          "name": "keyword.control.match.verona"
        },
        {
          "match": "\\bif\\b",
          "name": "keyword.control.if.verona"
        }
      ]
    },
    "assignment": {
      "begin": "(?=\\b(?:var|let)\\b\\s+)",
      "end": "(?=[\\=;])",
      "patterns": [
        {
          "match": "\\bvar\\b",
          "name": "keyword.other.var.verona"
        },
        {
          "match": "\\blet\\b",
          "name": "keyword.other.var.verona"
        },
        {
          "begin": "[_[:alpha:]][_[:alnum:]]*",
          "end": "(?=[\\=;:])",
          "name": "entity.name.variable.verona"
        },
        {
          "begin": ":",
          "end": "(?=\\=|;)",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "accessor": {
      "match": "\\.([_[:alpha:]][_[:alnum:]]*)\\b",
      "captures": {
        "1": {
          "name": "entity.name.variable.field.verona"
        }
      }
    },
    "call": {
      "match": "\\.([_[:alpha:]][_[:alnum:]]*)\\b\\s*(?=[\\[\\(])",
      "captures": {
        "1": {
          "name": "entity.name.function.verona"
        }
      }
    },
    "new": {
      "match": "\\b(new)\\s+([_[:alpha:]][_[:alnum:]]*)\\b",
      "captures": {
        "1": {
          "name": "keyword.operator.new.verona"
        },
        "2": {
          "name": "entity.name.type.verona"
        }
      }
    },
    "self": {
      "match": "\\bself\\b",
      "name": "keyword.other.self.verona"
    },
    "mutview": {
      "match": "\\mut-view\\b",
      "name": "keyword.other.mutview.verona"
    },
    "identifier": {
      "match": "\\b([_[:alpha:]][_[:alnum:]]*)\\b",
      "captures": {
        "1": {
          "name": "entity.name.variable.verona"
        }
      }
    },
    "type": {
      "patterns": [
        {
          "include": "#cown"
        },
        {
          "include": "#mutability"
        },
        {
          "include": "#generics"
        },
        {
          "match": "[_[:alpha:]][_[:alnum:]]*",
          "name": "entity.name.type.verona"
        }
      ]
    },
    "generics": {
      "begin": "(?=\\[)",
      "end": "(?<=\\])",
      "patterns": [
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "begin": "(?=\\b(?:class\\s+)?[_[:alpha:]][_[:alnum:]]*\\b)",
              "end": "(?=[,\\]])",
              "patterns": [
                {
                  "include": "#generics"
                },
                {
                  "match": "class",
                  "name": "keyword.other.generics.constraint.class.verona"
                },
                {
                  "match": "[_[:alpha:]][_[:alnum:]]*",
                  "name": "entity.name.type.generic.verona"
                }
              ]
            }
          ]
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.verona",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.verona",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "match": "\\b(?:-?(?:(?:\\d+|\\d*\\.\\d+)(?:[E|e][+|-]?\\d+)?))\\b",
      "name": "constant.numeric.verona"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "captures": {
        "1": {
          "name": "constant.language.boolean.verona"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.verona",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.inline.verona",
          "begin": "//",
          "end": "$"
        }
      ]
    }
  },
  "scopeName": "source.verona"
}
